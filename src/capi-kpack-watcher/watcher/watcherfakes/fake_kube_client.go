// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"capi_kpack_watcher/watcher"
	"sync"
)

type FakeKubeClient struct {
	GetContainerLogsStub        func(string, string) ([]byte, error)
	getContainerLogsMutex       sync.RWMutex
	getContainerLogsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getContainerLogsReturns struct {
		result1 []byte
		result2 error
	}
	getContainerLogsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubeClient) GetContainerLogs(arg1 string, arg2 string) ([]byte, error) {
	fake.getContainerLogsMutex.Lock()
	ret, specificReturn := fake.getContainerLogsReturnsOnCall[len(fake.getContainerLogsArgsForCall)]
	fake.getContainerLogsArgsForCall = append(fake.getContainerLogsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetContainerLogs", []interface{}{arg1, arg2})
	fake.getContainerLogsMutex.Unlock()
	if fake.GetContainerLogsStub != nil {
		return fake.GetContainerLogsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContainerLogsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeClient) GetContainerLogsCallCount() int {
	fake.getContainerLogsMutex.RLock()
	defer fake.getContainerLogsMutex.RUnlock()
	return len(fake.getContainerLogsArgsForCall)
}

func (fake *FakeKubeClient) GetContainerLogsCalls(stub func(string, string) ([]byte, error)) {
	fake.getContainerLogsMutex.Lock()
	defer fake.getContainerLogsMutex.Unlock()
	fake.GetContainerLogsStub = stub
}

func (fake *FakeKubeClient) GetContainerLogsArgsForCall(i int) (string, string) {
	fake.getContainerLogsMutex.RLock()
	defer fake.getContainerLogsMutex.RUnlock()
	argsForCall := fake.getContainerLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubeClient) GetContainerLogsReturns(result1 []byte, result2 error) {
	fake.getContainerLogsMutex.Lock()
	defer fake.getContainerLogsMutex.Unlock()
	fake.GetContainerLogsStub = nil
	fake.getContainerLogsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeClient) GetContainerLogsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getContainerLogsMutex.Lock()
	defer fake.getContainerLogsMutex.Unlock()
	fake.GetContainerLogsStub = nil
	if fake.getContainerLogsReturnsOnCall == nil {
		fake.getContainerLogsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getContainerLogsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getContainerLogsMutex.RLock()
	defer fake.getContainerLogsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ watcher.KubeClient = new(FakeKubeClient)
