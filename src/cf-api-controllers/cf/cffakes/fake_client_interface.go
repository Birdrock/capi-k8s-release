// Code generated by counterfeiter. DO NOT EDIT.
package cffakes

import (
	"sync"

	"code.cloudfoundry.org/capi-k8s-release/src/cf-api-controllers/cf"
	"code.cloudfoundry.org/capi-k8s-release/src/cf-api-controllers/cf/model"
)

type FakeClientInterface struct {
	ListRoutesStub        func() (model.RouteList, error)
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct {
	}
	listRoutesReturns struct {
		result1 model.RouteList
		result2 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 model.RouteList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientInterface) ListRoutes() (model.RouteList, error) {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListRoutes", []interface{}{})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientInterface) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *FakeClientInterface) ListRoutesCalls(stub func() (model.RouteList, error)) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = stub
}

func (fake *FakeClientInterface) ListRoutesReturns(result1 model.RouteList, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 model.RouteList
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) ListRoutesReturnsOnCall(i int, result1 model.RouteList, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 model.RouteList
			result2 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 model.RouteList
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.ClientInterface = new(FakeClientInterface)
